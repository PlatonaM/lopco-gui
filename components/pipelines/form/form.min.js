
export{Form}
class Form{static stage_template;constructor(ctr){this.container=ctr;this.stage_container=null;this.workers={};this.stages={};}
async getTemplates(){let response=await fetch('/components/pipelines/form/stage-template.html')
Form.stage_template=await response.text();return await fetch('/components/pipelines/form/template.html');}
draw(pl_data=null){fetch(active_cmp.constructor.w_api).then((response)=>{if(response.ok){return response.json()}
throw'Error retrieving Workers - '+response.status;}).then((data)=>{this.getTemplates().then((response)=>response.text()).then((template)=>{let workers=[];for(let[key,value]of Object.entries(data)){value=JSON.parse(value);workers.push({w_id:key,w_name:value['name']})
this.workers[key]=value;}
if(pl_data){this.container.innerHTML=Mustache.render(template,{workers:workers,id:pl_data['id'],name:pl_data['name'],stages:pl_data['stages']});}else{this.container.innerHTML=Mustache.render(template,{workers:workers});}
let form=this.container.getElementsByTagName('form')[0];form.addEventListener('submit',this.submit);this.stage_container=document.getElementById('stages');this.addInitStage();});}).catch((err)=>{this.container.innerHTML=err;});}
drawEdit(pl){fetch(active_cmp.constructor.api+'/'+pl).then((response)=>{if(response.ok){return response.json()}
throw'Error retrieving Pipeline - '+response.status;}).then((data)=>{data['id']=pl;this.draw(data);}).catch((err)=>{this.container.innerHTML=err;});}
genRandomID(){let array=new Uint32Array(2);window.crypto.getRandomValues(array);return array.join('')+String(performance.now()).replace('.','');}
addInitStage(){const st_id=this.genRandomID();this.stage_container.append(document.createRange().createContextualFragment(Mustache.render(Form.stage_template,{init:true,name:'init',id:st_id,output:[{name:'init_source',media_type:'',is_file:true}]})));this.stages[Object.keys(this.stages).length]={id:st_id,wk_id:null};}
addStage(wk_id){const st_num=Object.keys(this.stages).length;let inputs=[];let i_num=0;if(this.workers[wk_id]['input']){for(let item of this.workers[wk_id]['input']['fields']){item['i_num']=i_num;inputs.push(item);i_num++;}}
let i_values=[];if(st_num-1===0){i_values.push({name:'init_source'})}else{if(this.workers[this.stages[st_num-1]['wk_id']]['output']){for(let item of this.workers[this.stages[st_num-1]['wk_id']]['output']['fields']){i_values.push(item);}}}
let configs=[];let c_num=0;if(this.workers[wk_id]['configs']){for(let[key,value]of Object.entries(this.workers[wk_id]['configs'])){configs.push({key:key,value:value,c_num:c_num})
c_num++;}}
const st_id=this.genRandomID();this.stage_container.append(document.createRange().createContextualFragment(Mustache.render(Form.stage_template,{id:st_id,w_name:this.workers[wk_id]['name'],w_id:wk_id,input:inputs,values:i_values,output:(this.workers[wk_id]['output'])?this.workers[wk_id]['output']['fields']:null,has_configs:!!(this.workers[wk_id]['configs']),configs:configs})));this.stages[st_num]={id:st_id,wk_id:wk_id};}
removeStage(id){let element=document.getElementById(id);let parent=element.parentElement;parent.removeChild(element);let st_num;for(let[key,value]of Object.entries(this.stages)){if(value['id']===id){st_num=Number(key);break;}}
if(st_num!==Object.keys(this.stages).length-1){let i;for(i=st_num;i<Object.keys(this.stages).length-1;i++){this.stages[i]=this.stages[i+1];}}
delete this.stages[Object.keys(this.stages).length-1]}}