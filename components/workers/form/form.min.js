
export{Form}
class Form{static conf_template;static io_template;constructor(ctr){this.container=ctr;this.conf_count=0;this.io_count=0;}
genConfigs(items){let configs=[];if(items){for(const[key,value]of Object.entries(items)){configs.push({conf_key:key,conf_value:(value)?value:'null'})}}
return configs;}
draw(data=null){fetch('/components/workers/form/conf-fields-template.html').then((response)=>response.text()).then((template)=>{Form.conf_template=template;});fetch('/components/workers/form/io-fields-template.html').then((response)=>response.text()).then((template)=>{Form.io_template=template;});fetch('/components/workers/form/template.html').then((response)=>response.text()).then((template)=>{if(data){this.container.innerHTML=Mustache.render(template,{id:data['id'],name:data['name'],image:data['image'],description:data['description'],data_cache_path:data['data_cache_path'],conf_section:(data['configs']),configs:this.genConfigs(data['configs']),i_type:(data['input'])?data['input']['type']:null,o_type:(data['output'])?data['output']['type']:null,i_fields:(data['input'])?data['input']['fields']:null,o_fields:(data['output'])?data['output']['fields']:null});}else{this.container.innerHTML=Mustache.render(template,{});}
let form=this.container.getElementsByTagName('form')[0];form.addEventListener('submit',this.submit)});}
drawEdit(wk){fetch(active_cmp.constructor.api+'/'+wk).then((response)=>{if(response.ok){return response.json()}
throw'Error retrieving Worker - '+response.status;}).then((data)=>{data['id']=wk;this.draw(data);}).catch((err)=>{this.container.innerHTML=err;});}
submit(event){event.preventDefault();const form=new FormData(event.target);for(let[key,value]of form.entries()){console.log(key+' = '+value);}}
addConfigFields(element){let parent=element.parentElement;if(parent.childElementCount<2){element.className+=" uk-margin-bottom";}
parent.append(document.createRange().createContextualFragment(Mustache.render(Form.conf_template,{id:this.conf_count})));this.conf_count++;}
removeConfigFields(id){let element=document.getElementById(id);let parent=element.parentElement;parent.removeChild(element);if(parent.childElementCount<2){parent.firstElementChild.className='uk-button uk-button-default';}}
toggleIOFields(element,type){let parent=element.parentElement;if(element.value){if(parent.getElementsByTagName('button').length<1){let btn=document.createElement('button');btn.className='uk-button uk-button-default';btn.type='button';btn.setAttribute('uk-icon','plus');btn.setAttribute('uk-tooltip','title: Add '+type+' field; pos: top-left; delay: 500');btn.onclick=function(e){active_cmp.form.addIOField(this,type)};parent.append(btn);}}else{while(parent.children.length>1){const lst_child=parent.lastChild;if(lst_child.tagName.toLowerCase()!=='select'){parent.removeChild(lst_child);}}
parent.getElementsByTagName('select')[0].className='uk-select uk-width-auto';}}
addIOField(element,type){let parent=element.parentElement;if(parent.childElementCount<3){parent.getElementsByTagName('select')[0].className+=" uk-margin-bottom";element.className+=" uk-margin-bottom";}
parent.append(document.createRange().createContextualFragment(Mustache.render(Form.io_template,{id:this.io_count,type:type})));this.io_count++;}
removeIOField(id){let element=document.getElementById(id);let parent=element.parentElement;parent.removeChild(element);if(parent.childElementCount<3){parent.getElementsByTagName('select')[0].className='uk-select uk-width-auto';parent.getElementsByTagName('button')[0].className='uk-button uk-button-default';}}}